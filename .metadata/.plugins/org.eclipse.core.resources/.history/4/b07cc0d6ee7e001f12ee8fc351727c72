package net.taehyeon.community.service;

import java.io.File;
import java.io.IOException;

import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class FileUploadService implements FileUpload{

	// �꽌釉붾┸ 肄섑뀓�뒪�듃 鍮덉뿉�꽌 爰쇰궡湲�
	@Autowired
	private ServletContext servletContext;

	// �솗�옣�옄 �씫湲�
    private String[] allowedExt;

	// �뙆�씪 �겕湲� �뀑�똿
	private long maxSize;

	// ���옣寃쎈줈 �븘�뱶
	private String path;

	@Override
    public String[] setAllowedExt(String[] allowedExt) {
		return this.allowedExt = allowedExt;
	}

	@Override
	public long getMaxSize() {
		return maxSize;
	}

	@Override
	public void setMaxSize(long maxSize) {
		this.maxSize = maxSize;
	}

	@Override
	public String getAbsolutePath() {
		return path;
	}

	@Override
	public void setAbsolutePath(String path) {
		this.path = servletContext.getRealPath("/res/upload/") + path + "/";
	}

	//�뙆�씪 �뾽濡쒕뱶
	public String uploadFile(MultipartFile file) throws IOException {
		if (file == null || file.isEmpty()) {
			throw new IllegalArgumentException("");
		}
		if (maxSize > 0 && file.getSize() > maxSize) {
			throw new IllegalArgumentException("");
		}

		if (allowedExt != null && allowedExt.length > 0) {
			String fileExt = getFileExt(file.getOriginalFilename());
			boolean isOkFileExt = false;

			for (String ext : allowedExt) {
				if (fileExt.equals(ext)) {
					isOkFileExt = true;
					break;
				}
			}
			if (!isOkFileExt) {
				throw new IllegalArgumentException("asdfasdfasdf");
			}
		}

		String orFilename = file.getOriginalFilename();
		String filename = System.currentTimeMillis() + "_" + orFilename;
		File dest = new File(getAbsolutePath(), filename);

		file.transferTo(dest);
		return filename;
	}

	// �솗�옣�옄 媛��졇�삤湲�
	@Override
	public String getFileExt(String filename) {
		if (filename == null || filename.isEmpty()) {
			return "";
		}
		int dotIndex = filename.lastIndexOf(".");
		return (dotIndex != -1 && dotIndex < filename.length() - 1) ? filename.substring(dotIndex + 1) : "";
	}

}
