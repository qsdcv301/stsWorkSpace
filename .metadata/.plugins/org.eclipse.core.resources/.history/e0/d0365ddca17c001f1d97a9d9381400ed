package net.taehyeon.kdtcom.controller;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import net.taehyeon.kdtcom.service.ClientIpAddress;
import net.taehyeon.kdtcom.service.FileUploadService;

@RunWith(MockitoJUnitRunner.class)
@ContextConfiguration(locations = { "file:src/main/java/webapp/WEB-INF/spring/root-context.xml",
		"file:src/main/java/webapp/WEB-INF/spring/appServlet/servlet-context.xml" })
public class MainControllerTest {

	private MockMvc mockMvc;

	@Mock
	private FileUploadService fileUploadService;

	@Mock
	private ClientIpAddress clientIpAddress;

	@InjectMocks
	private MainController mainController;

	@Before
	public void setUp() {
		mockMvc = MockMvcBuilders.standaloneSetup(mainController).build();
	}

	@Test
	public void testRegisterPost() throws Exception {
		// Mocking 의존성 객체 셋팅
		when(clientIpAddress.getClientIpAddress()).thenReturn("127.0.0.1");

		// POST 요청 수행 및 기대 결과 검증
		mockMvc.perform(post("/register").param("userid", "testUser").param("userpass", "testUser")
				.param("username", "testName").param("useremail", "asdf@asdf.com").param("usertel", "010-1234-0144")
				.param("postcode", "12345").param("address", "경기도 어쩌구").param("address_detail", "저쩌동 304")
				.param("address_extra", "빈집").param("userprofile", "와우~~!")).andExpect(status().isOk())
				.andExpect(view().name("kdtcom.index")).andExpect(model().attributeDoesNotExist("error"));
	}

	@Test
	public void testRegisterPost_WithMissingParameters() throws Exception {
		// Mocking 의존성 객체 셋팅
		when(clientIpAddress.getClientIpAddress()).thenReturn("127.0.0.1");

		// 필수 파라미터 누락 테스트
		mockMvc.perform(post("/register").param("userid", "") // userid 파라미터 누락
				.param("userpass", "testUser")).andExpect(status().isBadRequest()) // 상태가 400일 때
				.andExpect(view().name("kdtcom.index")).andExpect(model().attributeExists("error"));
	}
}
